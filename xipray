#!/usr/bin/python3
# -*- coding: utf-8 -*-

import sys
import argparse
from xipraylib.xapi_logger import get_logger
from xipraylib.files_holder import *
from xipraylib.xstdout import *
from xipraylib.xapi_validator import *
from xipraylib.xapi.xapi import Xapi

parser = argparse.ArgumentParser(description='White Hat hack tool. Enjoy.')
subparsers = parser.add_subparsers(help='Script commands for change parameters')
set_subparser = subparsers.add_parser('set', help='Set parametr value')
logger = get_logger(__name__)

params_list = ['shodan', 'censys', 'Shodan-Token', 'Censys-Token', 'Censys-Secret', 'loglevel', 'logpath']

def args_init():
    group = set_subparser.add_mutually_exclusive_group(required=True)
    group.add_argument('-shodan', type=str, help='Enable or disable Shodan search')
    group.add_argument('-censys', type=str, help='Enable or disable Censys search')

    group.add_argument('-shodanToken', help='Your\'s personal Shodan token')
    group.add_argument('-censysToken', help='Your\'s personal Censys ID')
    group.add_argument('-censysSecret', help='Your\'s personal Censys secret')

    group.add_argument('-loglevel', type=int, help='Log level. [10, 20, 30]')
    group.add_argument('-logpath', type=str, help='Path to log file')

    search_pattern_group = parser.add_mutually_exclusive_group()
    search_pattern_group.add_argument('-ip', type=str, help='IP addr to search')
    search_pattern_group.add_argument('-domain', type=str, help='Domain name to search')

    parser.add_argument('-output', '-o', action='store_true', help='Write search results to ../xipray/results.txt')

    parser.add_argument('-list', '-l', action='store_true', help='Show current configuration')

def main():
    args_init()
    args = parser.parse_args()
    set_os_paths()
    config = read_config()
    execute = False
    is_domain = False
    if(hasattr(args, 'shodan') and args.shodan):
        config.set('XIP', 'Shodan', str(check_boolean(args.shodan)))
        update_config(config)
    if(hasattr(args, 'zoomey') and args.zoomey):
        config.set('XIP', 'zoomey', str(check_boolean(args.zoomey)))
        update_config(config)
    if(hasattr(args, 'censys') and args.censys):
        config.set('XIP', 'censys', str(check_boolean(args.censys)))
        update_config(config)
    if(hasattr(args, 'shodanToken') and args.shodanToken):
        config.set('Shodan', 'token', str(args.shodanToken))
        update_config(config)
        update_config(config)
    if(hasattr(args, 'censysToken') and args.censysToken):
        config.set('Censys', 'token', str(args.censysToken))
        update_config(config)
    if(hasattr(args, 'censysSecret') and args.censysSecret):
        config.set('Censys', 'secret', str(args.censysSecret))
        update_config(config)
    if(hasattr(args, 'loglevel') and args.loglevel):
        config.set('logger', 'level', str(args.loglevel))
        update_config(config)
    if(hasattr(args, 'logpath') and args.logpath):
        config.set('logger', 'path', str(args.logpath))
        update_config(config)
    if(args.list):
        params = read_params(config)
        print_params(parameters=params)
        return   
    if(len(sys.argv) == 1):
        parser.print_help()
        sys.exit() 
    if(hasattr(args, 'ip') and args.ip):
        if(check_ip(args.ip)):
            execute = True
        elif(check_path(args.ip)):
            execute = True
    if(hasattr(args, 'domain') and args.domain):
        execute = True
        is_domain = True
    if(execute):
        try:
            print(args.domain)
            params = read_params(config)
            start_message(parameters=params)

            is_shodan = check_boolean(config['XIP']['shodan'])
            is_censys = check_boolean(config['XIP']['censys'])
                        
            if(not (is_shodan or is_censys)):
                raise ValueError('Set true for at least one of this two searching methods (Shodan/Censys)')

            xapi = Xapi(is_shodan, is_censys, args.output)
            
            if(is_domain):
                if(check_path(args.domain, is_print=False)):
                    print_param(args.domain)
                    xapi.multi_host_search(args.domain)
                else:
                    xapi.host_search(args.ip)
            elif(check_ip(args.ip, is_print=False)):
                xapi.host_search(args.ip)
            elif(check_path(args.ip, is_print=False)):
                print_param(args.ip)
                xapi.multi_host_search(args.ip)
        except KeyboardInterrupt:
            print_param("CTRL+C detected, terminating.", mode="error")
            logger.info('CTRL+C detected')
            sys.exit()

if (__name__ == '__main__'):
    try:
        main()
    except ValueError as ex:
        print_param(ex, mode='error')